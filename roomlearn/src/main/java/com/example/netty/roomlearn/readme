

Room 的一些特点
编译时 sql 语句检查。相信大家都有过 app 跑起来，执行到 db 语句的时候 crash，检查之后发现原来是 sql 语句少了一个 )
或者其它符号之类的经历。Room 会在编译阶段检查你的 DAO 中的 sql 语句，如果写错了（包括 sql 语法错误跟表名、字段名等等错误），会直接编译失败并提醒你哪里不对。

sql 查询直接关联到 Java 对象。这个应该不用详细解释了，虽然很多第三方 db 库早已经实现。

耗时操作主动要求异步处理。这一点还是挺值得注意的，Room 会在执行 db 操作时判断是不是在 UI 线程，比如当你需要插入一条记录到数据库时，
Room 会让你放到异步线程去做，否则会直接 crash 掉 app 来告诉你不这样做容易阻塞 UI 线程。虽说死相难看了点（个人觉得打个警告不就完了么?），

基于注解编译时自动生成代码。这个应该算是 Room 工作原理的核心所在了，你要写的代码之所以这么少，说白了还不是因为 Google 给你写好了很多？

API 设计符合 Sql 标准。方便扩展进行各种 db 操作。

Room会在编译时检查你的 sql 语句，如果有语法错误，或者表名、字段名错误，都会直接编译报错让你修改，避免运行时出现 crash。

Room 的三大组件

****Entity。实体，说白了就是我们最常见的一个对象
****Database。数据库，Room 提供了一个非常方便的静态方法来供我们创建数据库
****DAO。Data Access Object，把你 Entity 所有的 CRUD 业务代码封装在这里就好

Database : 持有DB和DAO
Entity : 定义POJO类，即数据表结构
DAO(Data Access Objects) : 定义访问数据（增删改查）的接口
