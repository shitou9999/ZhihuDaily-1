一、Boolean 类型
Boolean 值有两个值，分别为 true 或 false。多数情况下，Kotlin 中的 Boolean 相当于 Java 中的基本类型 boolean，
只有在必要的情况下才会装箱成为 Java 中的装箱类型 Boolean。这一切都是交由编译器来完成，我们无需关心。

var isFirst: Boolean = true
var isSecond: Boolean = false
二、Number 类型
分类	类型	位宽
浮点型	Float	32 位
浮点型	Double	64 位
整型	Long	64 位
整型	Int	32 位
整型	Short	16 位
字节	Byte	8 位
var aLong: Long = 123L
var aInt: Int = 1234567890
var aShort: Short = 12345

var aFloat: Float = 23F
var aDouble: Double = 23.0

var aByte: Byte = 127
基本类型的装箱与拆箱
Kotlin 不再区分装箱与非装箱类型，在需要的时候编译器会帮我们自动的选择是使用基本类型还是装箱类型。

三、Chat 类型
Chat 类型表示一个字符，一个字符可以是一个字，或者一个符号等等。
字符占两个字节，表示一个 16 位的 Unicode 字符。
字符使用单引号 '' 引起来，例如 '中'，'A'，'\n'。

var aChar: Char = '中'
var nChar: Char = '\n'
var bChar: Char = '国'
\n 表示换行符，表示回车的转义字符，下面列出常用的转义字符：

转义字符	含义
\t	制表符
\b	光标后退一个字符
\n	回车
\r	光标回到行首
\'	单引号，在 Char 里使用
\"	双引号，在 String 里使用
\\	反斜杠
\$	Kotlin 支持美元符号开头的字符串模板，所以打印美元符号需要转义
四、数值类型的显式转换
在 Java 里面，将一个 int 值赋给 long 值，是可以允许的，因为 Int 的范围比 long 要小，所以 long 可以兼容 int。
但是，在 Kotlin 中这样的隐式转换是不被支持的。

var aInt: Int = 10
var aLong: Long = 10000

// 编译器会报错
aLong = aInt

// 必须调用 toXXX 方法显示转换
aLong = aInt.toLong()
每个数值类型都支持下面的转换

toLong：Long
toInt：Int
toShort：Short
toFloat：Float
toDouble：Double
toByte：Byte
toChar: Char
toString: String
五、字符串类型
字符串本质上可以说是"一串" Char，字符串使用双引号 "" 引起来

var hello: String = "Hello Kotlin"
var name: String = String(charArrayOf('f','a','n','c','y'))
5.1 字符串的比较
var aName: String = "fancyluo"
var bName: String = "fancyluo"

println(aName == bName) // true
println(aName === bName)// false
熟悉 Java 的同学对以上结果是不是就困惑了，怎么 == 打印出来了 true，这里我们可以看看 == 的源码就可以解开疑惑了。

public open operator fun equals(other: Any?): Boolean
Kotlin 的 == 就相当于 Java 的 equeals，表示比较内容。
Kotlin 的 === 就相当于 Java 的 ==，表示比较对象是否相同。

5.2 字符串模板
在 Kotlin 中，字符串可以包含模板表达式，模板表达式由 $ 开头，如果需要进行表达式运算，可以写在 {} 里面。

var a: Int = 1
var b: Int = 2

// Java
println("" + a + " + " + b + " = " + (a + b))

// 字符串模板
println("$a + $b = ${a + b}")

// print: 1 + 2 = 3

// 原始字符串
var rawString = """
    a
    b
    ${a + b}
"""
六、数组
Kotlin 中的数组由 Array 类表示，表示以一系列的对象，可以使用函数 arrayOf 来创建数组，示例如下

val arrayOfString: Array<String> = arrayOf("fancy", "luo")
val arrayOfUser: Array<UserInfo> = arrayOf(
            UserInfo("fancyluo", "音乐"),
            UserInfo("jack", "篮球"))
可以看到，我们使用 val 来修饰数组，在 Kotlin 中，数组是不可变的。上面数组里我们放的都是对象，那么基本类型的数组呢？Kotlin 中为了防止装箱拆箱的操作，为每个基本类型都专门定制了相应的数组类型，从而避免过度装箱的消耗。例如：IntArray，CharArray 等等。

val arrayOfInt: IntArray = intArrayOf(1, 2, 3)
val arrayOfChar: CharArray = charArrayOf('中', '国')
七、区间
区间是一个数学上的概念，表示范围。Kotlin 中区间是 ClosedRange 接口的子类，一般比较常用的是 IntRange。

// 闭区间 [0,1024]
var range: IntRange = 0..1024
// 半开区间 [0,1024) = [0,1023]
var untilRange = 0 until 1024

fun main(args: Array<String>) {
    // 判断是否在区间中
    print(666 in range))
    // 区间迭代
    for (i in range) {
        print("$i, ")
    }
}
八、空类型安全
fun getName(): String{
    return null
}
上面的代码在编译器里是会报错的，普通情况下，Kotlin 中是不允许返回 null 类型的，这也就表明，我们在取这个值的时候，无需担心，直接使用即可。那我们就是想返回 null 呢？ 在返回值后面加个 ? 即可。

fun getName(): String?{
    return null
}
但是，返回了空类型之后，要使用这个函数就不是这么简单了，如果你并不确定此函数返回的是否为空，那么你需要在函数后面加上一个?，如果你确定的知道此函数不会返回空，那么你可以在函数后面加上 !! 表示我明确知道返回值不为空，可放心使用。

// 此行代码会报错
var nameLength = getName().length

// 不确定是否为空
var nameLength = getName()?.length

// 确定不为空
var nameLength = getName()!!.length

// getName 不为空则返回值，为空则不再执行后面的逻辑
var nameLength = getName() ?: return